// Code generated by fastssz. DO NOT EDIT.
// Hash: 0f0655ec701db4de9479b122ccc9152b370be9116b2814917810ca4334239411
// Version: 0.1.3
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BigIntType object
func (b *BigIntType) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BigIntType object to a target array
func (b *BigIntType) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BigInt'
	bitLength := b.BigInt.BitLen()
	// The minimal byte length is bitLength rounded up
	// to the next multiple of 8, divided by 8.
	requiredLength := ((bitLength + 7) & -8) >> 3
	if 129 < requiredLength {
		err = ssz.ErrBigIntTooBigFn("BigIntType.BigInt", requiredLength, 129)
		return
	}
	dst = ssz.MarshalBigInt(dst, b.BigInt)

	return
}

// UnmarshalSSZ ssz unmarshals the BigIntType object
func (b *BigIntType) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 129 {
		return ssz.ErrSize
	}

	// Field (0) 'BigInt'
	if err = ssz.ValidateBigInt(b.BigInt, 129); err != nil {
		return err
	}
	b.BigInt = ssz.UnmarshalBigInt(buf[0:129])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BigIntType object
func (b *BigIntType) SizeSSZ() (size int) {
	size = 129
	return
}

// HashTreeRoot ssz hashes the BigIntType object
func (b *BigIntType) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BigIntType object with a hasher
func (b *BigIntType) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BigInt'
	bitLength := b.BigInt.BitLen()
	// The minimal byte length is bitLength rounded up
	// to the next multiple of 8, divided by 8.
	requiredLength := ((bitLength + 7) & -8) >> 3
	if 129 < requiredLength {
		err = ssz.ErrBigIntTooBigFn("BigIntType.BigInt", requiredLength, 129)
		return
	}

	dst := make([]byte, 129)
	dst = b.BigInt.FillBytes(dst)
	// Reverse dst to little endian byte order
	for i, j := 0, len(dst)-1; i < j; i, j = i+1, j-1 {
		dst[i], dst[j] = dst[j], dst[i]
	}
	hh.PutBytes(dst)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BigIntType object
func (b *BigIntType) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
